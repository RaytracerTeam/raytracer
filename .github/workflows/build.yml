name: Build/Package and Release

on:
  push:
    tags:
      - '*'
    branches:
      - "actions"

env:
  EXECUTABLES: "binary"
  ARGUMENTS: ""
  BIN_NAME: raytracer
  MS_BIN_NAME: Raytracer

jobs:
  # linux:
  #   runs-on: ubuntu-latest
  #   # strategy:
  #   #   matrix:
  #   #     target: ["x86_64", "arm64"]
  #   env:
  #     CCACHE_DIR: ${{ github.workspace }}/.ccache
  #     CCACHE_COMPILERCHECK: content
  #     CCACHE_SLOPPINESS: time_macros
  #     OS: linux
  #     TARGET: "x86_64" # ${{ matrix.target }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Setup artifacts
  #       run: mkdir artifacts
  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update && sudo apt-get install -y libsfml-dev curl libglew-dev libglfw3-dev
  #         cd /tmp
  #         curl -o /tmp/libconfig-1.7.3.tar -L https://github.com/hyperrealm/libconfig/releases/download/v1.7.3/libconfig-1.7.3.tar.gz
  #         tar xzvf /tmp/libconfig-1.7.3.tar
  #         cd libconfig-1.7.3
  #         ./configure
  #         sudo make install
  #         cd -

  #     - name: Set up cache
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ env.CCACHE_DIR }}
  #         key: ${{ runner.os }}-${{ env.TARGET }}-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-${{ env.TARGET }}-
  #     - name: Build
  #       run: make bonus
  #     - name: Pack
  #       run: ./.github/pack/posix.sh
  #     - name: Upload
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.OS }}-${{ env.TARGET }}
  #         path: artifacts/
  # macos:
  #   runs-on: ${{ (matrix.target == 'x86_64' && 'macos-13') || 'macos-14' }}
  #   strategy:
  #     matrix:
  #       target: ["x86_64", "arm64"]
  #   env:
  #     CCACHE_DIR: ${{ github.workspace }}/.ccache
  #     CCACHE_COMPILERCHECK: content
  #     CCACHE_SLOPPINESS: time_macros
  #     OS: macos
  #     TARGET: ${{ matrix.target }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - name: Set up cache
  #       uses: actions/cache@v4
  #       with:
  #         path: ${{ env.CCACHE_DIR }}
  #         key: ${{ runner.os }}-${{ env.TARGET }}-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-${{ env.TARGET }}-
  #     - name: Setup artifacts
  #       run: mkdir artifacts
  #     - name: Setup Build Environment
  #       run: brew install make libconfig sfml glfw glew
  #     - name: Build
  #       run: make bonus
  #     - name: Pack
  #       run: ./.github/pack/posix.sh
  #     - name: Upload
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: ${{ env.OS }}-${{ env.TARGET }}
  #         path: artifacts/
  windows:
    runs-on: windows-latest
    env:
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_COMPILERCHECK: content
      CCACHE_SLOPPINESS: time_macros
      OS: windows
      TARGET: "x86_64"
    steps:
      - uses: actions/checkout@v4
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ${{ runner.os }}-${{ env.TARGET }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-${{ env.TARGET }}-
      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.0.2
      - name: Build
        run: msbuild {{ env.MS_BIN_NAME }}.vcxproj /p:Configuration=Release
      - name: Pack
        shell: pwsh
        run: .\.github\pack\windows.ps1
      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.OS }}-${{ env.TARGET }}
          path: artifacts/

  release:
    runs-on: ubuntu-latest
    needs: [windows] # windows,
    if: ${{ startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/download-artifact@v4
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false
      - name: Upload artifacts
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          asset_paths: '["./**/*.tar.*","./**/*.7z","./**/*.zip"]'
